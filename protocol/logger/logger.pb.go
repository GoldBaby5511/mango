// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: logger.proto

package logger

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CMDID_Logger int32

const (
	CMDID_Logger_IDLogClientInit CMDID_Logger = 1
	CMDID_Logger_IDLogReq        CMDID_Logger = 2
	CMDID_Logger_IDLogFlush      CMDID_Logger = 3 // 立即写日志到文件中
)

// Enum value maps for CMDID_Logger.
var (
	CMDID_Logger_name = map[int32]string{
		1: "IDLogClientInit",
		2: "IDLogReq",
		3: "IDLogFlush",
	}
	CMDID_Logger_value = map[string]int32{
		"IDLogClientInit": 1,
		"IDLogReq":        2,
		"IDLogFlush":      3,
	}
)

func (x CMDID_Logger) Enum() *CMDID_Logger {
	p := new(CMDID_Logger)
	*p = x
	return p
}

func (x CMDID_Logger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CMDID_Logger) Descriptor() protoreflect.EnumDescriptor {
	return file_logger_proto_enumTypes[0].Descriptor()
}

func (CMDID_Logger) Type() protoreflect.EnumType {
	return &file_logger_proto_enumTypes[0]
}

func (x CMDID_Logger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CMDID_Logger) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CMDID_Logger(num)
	return nil
}

// Deprecated: Use CMDID_Logger.Descriptor instead.
func (CMDID_Logger) EnumDescriptor() ([]byte, []int) {
	return file_logger_proto_rawDescGZIP(), []int{0}
}

type LogReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName   *string `protobuf:"bytes,1,opt,name=file_name,json=fileName" json:"file_name,omitempty"`           // FILE_NAME
	LineNo     *uint32 `protobuf:"varint,2,opt,name=line_no,json=lineNo" json:"line_no,omitempty"`                // LINE_NO
	ThreadId   *uint32 `protobuf:"varint,3,opt,name=thread_id,json=threadId" json:"thread_id,omitempty"`          // 线程
	ClassName  []byte  `protobuf:"bytes,4,opt,name=class_name,json=className" json:"class_name,omitempty"`        // 日志分类名称
	LogLevel   *uint32 `protobuf:"varint,5,opt,name=log_level,json=logLevel" json:"log_level,omitempty"`          // 日志级别
	Content    []byte  `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`                             // 内容
	ServerId   *uint32 `protobuf:"varint,7,opt,name=server_id,json=serverId" json:"server_id,omitempty"`          // 来自于哪个服务器
	TimeMs     *uint64 `protobuf:"varint,8,opt,name=time_ms,json=timeMs" json:"time_ms,omitempty"`                // 发出时间
	ShowList   *bool   `protobuf:"varint,9,opt,name=show_list,json=showList" json:"show_list,omitempty"`          // 是否在界面的日志框中输出
	SrcApptype *uint32 `protobuf:"varint,10,opt,name=src_apptype,json=srcApptype" json:"src_apptype,omitempty"`   // 源AppType
	SrcAppid   *uint32 `protobuf:"varint,11,opt,name=src_appid,json=srcAppid" json:"src_appid,omitempty"`         // 源AppID
	TimeMsRecv *uint64 `protobuf:"varint,12,opt,name=time_ms_recv,json=timeMsRecv" json:"time_ms_recv,omitempty"` // 接收时间
	SrcAppname *string `protobuf:"bytes,13,opt,name=src_appname,json=srcAppname" json:"src_appname,omitempty"`    // 源App名(一般为进程名)
}

func (x *LogReq) Reset() {
	*x = LogReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogReq) ProtoMessage() {}

func (x *LogReq) ProtoReflect() protoreflect.Message {
	mi := &file_logger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogReq.ProtoReflect.Descriptor instead.
func (*LogReq) Descriptor() ([]byte, []int) {
	return file_logger_proto_rawDescGZIP(), []int{0}
}

func (x *LogReq) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *LogReq) GetLineNo() uint32 {
	if x != nil && x.LineNo != nil {
		return *x.LineNo
	}
	return 0
}

func (x *LogReq) GetThreadId() uint32 {
	if x != nil && x.ThreadId != nil {
		return *x.ThreadId
	}
	return 0
}

func (x *LogReq) GetClassName() []byte {
	if x != nil {
		return x.ClassName
	}
	return nil
}

func (x *LogReq) GetLogLevel() uint32 {
	if x != nil && x.LogLevel != nil {
		return *x.LogLevel
	}
	return 0
}

func (x *LogReq) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *LogReq) GetServerId() uint32 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *LogReq) GetTimeMs() uint64 {
	if x != nil && x.TimeMs != nil {
		return *x.TimeMs
	}
	return 0
}

func (x *LogReq) GetShowList() bool {
	if x != nil && x.ShowList != nil {
		return *x.ShowList
	}
	return false
}

func (x *LogReq) GetSrcApptype() uint32 {
	if x != nil && x.SrcApptype != nil {
		return *x.SrcApptype
	}
	return 0
}

func (x *LogReq) GetSrcAppid() uint32 {
	if x != nil && x.SrcAppid != nil {
		return *x.SrcAppid
	}
	return 0
}

func (x *LogReq) GetTimeMsRecv() uint64 {
	if x != nil && x.TimeMsRecv != nil {
		return *x.TimeMsRecv
	}
	return 0
}

func (x *LogReq) GetSrcAppname() string {
	if x != nil && x.SrcAppname != nil {
		return *x.SrcAppname
	}
	return ""
}

type LogFlush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId   *uint32 `protobuf:"varint,1,opt,name=server_id,json=serverId" json:"server_id,omitempty"`       // 来自于哪个服务器
	SrcApptype *uint32 `protobuf:"varint,2,opt,name=src_apptype,json=srcApptype" json:"src_apptype,omitempty"` // 源AppType
	SrcAppid   *uint32 `protobuf:"varint,3,opt,name=src_appid,json=srcAppid" json:"src_appid,omitempty"`       // 源AppID
	SrcAppname *string `protobuf:"bytes,4,opt,name=src_appname,json=srcAppname" json:"src_appname,omitempty"`  // 源App名(一般为进程名)
}

func (x *LogFlush) Reset() {
	*x = LogFlush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogFlush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogFlush) ProtoMessage() {}

func (x *LogFlush) ProtoReflect() protoreflect.Message {
	mi := &file_logger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogFlush.ProtoReflect.Descriptor instead.
func (*LogFlush) Descriptor() ([]byte, []int) {
	return file_logger_proto_rawDescGZIP(), []int{1}
}

func (x *LogFlush) GetServerId() uint32 {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return 0
}

func (x *LogFlush) GetSrcApptype() uint32 {
	if x != nil && x.SrcApptype != nil {
		return *x.SrcApptype
	}
	return 0
}

func (x *LogFlush) GetSrcAppid() uint32 {
	if x != nil && x.SrcAppid != nil {
		return *x.SrcAppid
	}
	return 0
}

func (x *LogFlush) GetSrcAppname() string {
	if x != nil && x.SrcAppname != nil {
		return *x.SrcAppname
	}
	return ""
}

var File_logger_proto protoreflect.FileDescriptor

var file_logger_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x62, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6d, 0x64, 0x22, 0x85, 0x03,
	0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x70, 0x70, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x41, 0x70,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x70, 0x70,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x41, 0x70, 0x70,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x52, 0x65, 0x63, 0x76, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x70, 0x70, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x41, 0x70,
	0x70, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x70, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x41, 0x70, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x41, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x41, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x41,
	0x0a, 0x0c, 0x43, 0x4d, 0x44, 0x49, 0x44, 0x5f, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x44, 0x4c, 0x6f, 0x67, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x69,
	0x74, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x44, 0x4c, 0x6f, 0x67, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x10,
	0x03, 0x42, 0x09, 0x5a, 0x07, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
}

var (
	file_logger_proto_rawDescOnce sync.Once
	file_logger_proto_rawDescData = file_logger_proto_rawDesc
)

func file_logger_proto_rawDescGZIP() []byte {
	file_logger_proto_rawDescOnce.Do(func() {
		file_logger_proto_rawDescData = protoimpl.X.CompressGZIP(file_logger_proto_rawDescData)
	})
	return file_logger_proto_rawDescData
}

var file_logger_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_logger_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_logger_proto_goTypes = []interface{}{
	(CMDID_Logger)(0), // 0: bs.logger.cmd.CMDID_Logger
	(*LogReq)(nil),    // 1: bs.logger.cmd.LogReq
	(*LogFlush)(nil),  // 2: bs.logger.cmd.LogFlush
}
var file_logger_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_logger_proto_init() }
func file_logger_proto_init() {
	if File_logger_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_logger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_logger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogFlush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logger_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_logger_proto_goTypes,
		DependencyIndexes: file_logger_proto_depIdxs,
		EnumInfos:         file_logger_proto_enumTypes,
		MessageInfos:      file_logger_proto_msgTypes,
	}.Build()
	File_logger_proto = out.File
	file_logger_proto_rawDesc = nil
	file_logger_proto_goTypes = nil
	file_logger_proto_depIdxs = nil
}
