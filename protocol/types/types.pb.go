// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: types.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientOS int32

const (
	ClientOS_UNKNOW  ClientOS = 0
	ClientOS_PC      ClientOS = 1
	ClientOS_IOS     ClientOS = 2
	ClientOS_Android ClientOS = 4
	ClientOS_H5      ClientOS = 8
)

// Enum value maps for ClientOS.
var (
	ClientOS_name = map[int32]string{
		0: "UNKNOW",
		1: "PC",
		2: "IOS",
		4: "Android",
		8: "H5",
	}
	ClientOS_value = map[string]int32{
		"UNKNOW":  0,
		"PC":      1,
		"IOS":     2,
		"Android": 4,
		"H5":      8,
	}
)

func (x ClientOS) Enum() *ClientOS {
	p := new(ClientOS)
	*p = x
	return p
}

func (x ClientOS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientOS) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (ClientOS) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x ClientOS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ClientOS) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ClientOS(num)
	return nil
}

// Deprecated: Use ClientOS.Descriptor instead.
func (ClientOS) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

type EnumFundType int32

const (
	EnumFundType_ALL_TYPE       EnumFundType = 0  //所有类型
	EnumFundType_INDENTIFY_TYPE EnumFundType = 1  //身份道具 门派、归属地、推广方、门票类
	EnumFundType_MONEY_TYPE     EnumFundType = 2  //财富道具 币、豆、券…
	EnumFundType_THIRD_TYPE     EnumFundType = 3  //第三方领取码 他网的道具或可以通过网址自动传送到外方站网
	EnumFundType_GAMEEXP_TYPE   EnumFundType = 4  //游戏具体类  经验、大师分、战功、游戏时长、局数、胜负数
	EnumFundType_ATTRIBUTE_TYPE EnumFundType = 5  //属性类 如在线时长
	EnumFundType_GOODS_TYPE     EnumFundType = 6  //实物类，如手机等
	EnumFundType_VIRTUAL_TYPE   EnumFundType = 7  //虚拟类，如Q币，充值卡等
	EnumFundType_PACKED_TYPE    EnumFundType = 8  //礼包类,这个类型被web使用了，故用下面那个
	EnumFundType_GIFT_TYPE      EnumFundType = 9  //福袋类
	EnumFundType_RAND_TYPE      EnumFundType = 10 //随机类
)

// Enum value maps for EnumFundType.
var (
	EnumFundType_name = map[int32]string{
		0:  "ALL_TYPE",
		1:  "INDENTIFY_TYPE",
		2:  "MONEY_TYPE",
		3:  "THIRD_TYPE",
		4:  "GAMEEXP_TYPE",
		5:  "ATTRIBUTE_TYPE",
		6:  "GOODS_TYPE",
		7:  "VIRTUAL_TYPE",
		8:  "PACKED_TYPE",
		9:  "GIFT_TYPE",
		10: "RAND_TYPE",
	}
	EnumFundType_value = map[string]int32{
		"ALL_TYPE":       0,
		"INDENTIFY_TYPE": 1,
		"MONEY_TYPE":     2,
		"THIRD_TYPE":     3,
		"GAMEEXP_TYPE":   4,
		"ATTRIBUTE_TYPE": 5,
		"GOODS_TYPE":     6,
		"VIRTUAL_TYPE":   7,
		"PACKED_TYPE":    8,
		"GIFT_TYPE":      9,
		"RAND_TYPE":      10,
	}
)

func (x EnumFundType) Enum() *EnumFundType {
	p := new(EnumFundType)
	*p = x
	return p
}

func (x EnumFundType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumFundType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[1].Descriptor()
}

func (EnumFundType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[1]
}

func (x EnumFundType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnumFundType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnumFundType(num)
	return nil
}

// Deprecated: Use EnumFundType.Descriptor instead.
func (EnumFundType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

//add by yyf 加新财富管理服务器的相关内容
//财富类型定义
type EnumFundManageType int32

const (
	EnumFundManageType_AI_ALL_TYPE         EnumFundManageType = 0 //所有类型
	EnumFundManageType_SETTLEACCOUNTS_TYPE EnumFundManageType = 1 //结算类 如包子，金币，金豆等可用于单局结算
	EnumFundManageType_KIND_TYPE           EnumFundManageType = 2 //实物类，一般可以直接兑换成实物
	EnumFundManageType_GAMEATTRIBUTE_TYPE  EnumFundManageType = 3 //游戏相关属性类 单纯跟某游戏相关
	EnumFundManageType_GAMEPROP_TYPE       EnumFundManageType = 4 //游戏相关使用道具
)

// Enum value maps for EnumFundManageType.
var (
	EnumFundManageType_name = map[int32]string{
		0: "AI_ALL_TYPE",
		1: "SETTLEACCOUNTS_TYPE",
		2: "KIND_TYPE",
		3: "GAMEATTRIBUTE_TYPE",
		4: "GAMEPROP_TYPE",
	}
	EnumFundManageType_value = map[string]int32{
		"AI_ALL_TYPE":         0,
		"SETTLEACCOUNTS_TYPE": 1,
		"KIND_TYPE":           2,
		"GAMEATTRIBUTE_TYPE":  3,
		"GAMEPROP_TYPE":       4,
	}
)

func (x EnumFundManageType) Enum() *EnumFundManageType {
	p := new(EnumFundManageType)
	*p = x
	return p
}

func (x EnumFundManageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumFundManageType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[2].Descriptor()
}

func (EnumFundManageType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[2]
}

func (x EnumFundManageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnumFundManageType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnumFundManageType(num)
	return nil
}

// Deprecated: Use EnumFundManageType.Descriptor instead.
func (EnumFundManageType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

//物品类型
type EItemType int32

const (
	EItemType_ITEM_TYPE_PROP              EItemType = 1 //道具
	EItemType_ITEM_TYPE_SKIN_CHIP         EItemType = 2 //皮肤碎片
	EItemType_ITEM_TYPE_ACTIVITY_MATERIAL EItemType = 3 //活动材料
)

// Enum value maps for EItemType.
var (
	EItemType_name = map[int32]string{
		1: "ITEM_TYPE_PROP",
		2: "ITEM_TYPE_SKIN_CHIP",
		3: "ITEM_TYPE_ACTIVITY_MATERIAL",
	}
	EItemType_value = map[string]int32{
		"ITEM_TYPE_PROP":              1,
		"ITEM_TYPE_SKIN_CHIP":         2,
		"ITEM_TYPE_ACTIVITY_MATERIAL": 3,
	}
)

func (x EItemType) Enum() *EItemType {
	p := new(EItemType)
	*p = x
	return p
}

func (x EItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[3].Descriptor()
}

func (EItemType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[3]
}

func (x EItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EItemType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EItemType(num)
	return nil
}

// Deprecated: Use EItemType.Descriptor instead.
func (EItemType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

type BaseUserInfo_CtrlFlag int32

const (
	BaseUserInfo_SHOW_WX_IMG   BaseUserInfo_CtrlFlag = 1 // 显示微信头像
	BaseUserInfo_MASK_NICKNAME BaseUserInfo_CtrlFlag = 2 // 昵称打码(昵***称)
)

// Enum value maps for BaseUserInfo_CtrlFlag.
var (
	BaseUserInfo_CtrlFlag_name = map[int32]string{
		1: "SHOW_WX_IMG",
		2: "MASK_NICKNAME",
	}
	BaseUserInfo_CtrlFlag_value = map[string]int32{
		"SHOW_WX_IMG":   1,
		"MASK_NICKNAME": 2,
	}
)

func (x BaseUserInfo_CtrlFlag) Enum() *BaseUserInfo_CtrlFlag {
	p := new(BaseUserInfo_CtrlFlag)
	*p = x
	return p
}

func (x BaseUserInfo_CtrlFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaseUserInfo_CtrlFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[4].Descriptor()
}

func (BaseUserInfo_CtrlFlag) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[4]
}

func (x BaseUserInfo_CtrlFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BaseUserInfo_CtrlFlag) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BaseUserInfo_CtrlFlag(num)
	return nil
}

// Deprecated: Use BaseUserInfo_CtrlFlag.Descriptor instead.
func (BaseUserInfo_CtrlFlag) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1, 0}
}

type BaseUserInfo_UserType int32

const (
	BaseUserInfo_UNKNOW BaseUserInfo_UserType = 0  //未知
	BaseUserInfo_Normal BaseUserInfo_UserType = 1  //正常类型
	BaseUserInfo_Robot  BaseUserInfo_UserType = 10 //机器人
)

// Enum value maps for BaseUserInfo_UserType.
var (
	BaseUserInfo_UserType_name = map[int32]string{
		0:  "UNKNOW",
		1:  "Normal",
		10: "Robot",
	}
	BaseUserInfo_UserType_value = map[string]int32{
		"UNKNOW": 0,
		"Normal": 1,
		"Robot":  10,
	}
)

func (x BaseUserInfo_UserType) Enum() *BaseUserInfo_UserType {
	p := new(BaseUserInfo_UserType)
	*p = x
	return p
}

func (x BaseUserInfo_UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaseUserInfo_UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[5].Descriptor()
}

func (BaseUserInfo_UserType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[5]
}

func (x BaseUserInfo_UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BaseUserInfo_UserType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BaseUserInfo_UserType(num)
	return nil
}

// Deprecated: Use BaseUserInfo_UserType.Descriptor instead.
func (BaseUserInfo_UserType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1, 1}
}

//* 通用消息
//可以省掉定义一些其他报文
type CommonMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringData    []byte  `protobuf:"bytes,1,opt,name=string_data,json=stringData" json:"string_data,omitempty"`
	LonglongValue *uint64 `protobuf:"varint,2,opt,name=longlong_value,json=longlongValue" json:"longlong_value,omitempty"`
}

func (x *CommonMessage) Reset() {
	*x = CommonMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonMessage) ProtoMessage() {}

func (x *CommonMessage) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonMessage.ProtoReflect.Descriptor instead.
func (*CommonMessage) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *CommonMessage) GetStringData() []byte {
	if x != nil {
		return x.StringData
	}
	return nil
}

func (x *CommonMessage) GetLonglongValue() uint64 {
	if x != nil && x.LonglongValue != nil {
		return *x.LonglongValue
	}
	return 0
}

//
//基础用户信息
type BaseUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       *uint64                `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`                                            //用户ID
	GameId       *uint64                `protobuf:"varint,2,opt,name=game_id,json=gameId" json:"game_id,omitempty"`                                            //数字ID
	Gender       *uint32                `protobuf:"varint,3,opt,name=gender" json:"gender,omitempty"`                                                          //性别
	MarketId     *uint32                `protobuf:"varint,6,opt,name=market_id,json=marketId" json:"market_id,omitempty"`                                      //所属渠道
	FaceId       *uint32                `protobuf:"varint,7,opt,name=face_id,json=faceId" json:"face_id,omitempty"`                                            //头像id
	CustomFace   *string                `protobuf:"bytes,8,opt,name=custom_face,json=customFace" json:"custom_face,omitempty"`                                 //自定义的图像地址
	NickName     *string                `protobuf:"bytes,9,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`                                       //昵称
	UserType     *BaseUserInfo_UserType `protobuf:"varint,12,opt,name=user_type,json=userType,enum=bs.types.BaseUserInfo_UserType" json:"user_type,omitempty"` //用户类别？
	SiteId       *uint32                `protobuf:"varint,13,opt,name=site_id,json=siteId" json:"site_id,omitempty"`                                           //site id
	RegisterData *string                `protobuf:"bytes,19,opt,name=register_data,json=registerData" json:"register_data,omitempty"`                          //注册时间
	CtrlFlag     *uint32                `protobuf:"varint,21,opt,name=ctrl_flag,json=ctrlFlag" json:"ctrl_flag,omitempty"`                                     // 控制标志 见CtrlFlag枚举
	//add by yx 2019-09-19
	LoginWays *string `protobuf:"bytes,22,opt,name=login_ways,json=loginWays" json:"login_ways,omitempty"` //登录方式(91account,phonenumber,xiaomi,vivo,oppo,huawei,weixin,weibo,alipay...)
	//add by yyf 2019-10-08
	UserLevel   *uint32 `protobuf:"varint,23,opt,name=user_level,json=userLevel" json:"user_level,omitempty"`         //用户等级 1-9之间
	RegMarketId *uint32 `protobuf:"varint,24,opt,name=reg_market_id,json=regMarketId" json:"reg_market_id,omitempty"` //注册主渠道
	RegSiteId   *uint32 `protobuf:"varint,25,opt,name=reg_site_id,json=regSiteId" json:"reg_site_id,omitempty"`       //注册子渠道
}

func (x *BaseUserInfo) Reset() {
	*x = BaseUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseUserInfo) ProtoMessage() {}

func (x *BaseUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseUserInfo.ProtoReflect.Descriptor instead.
func (*BaseUserInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *BaseUserInfo) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *BaseUserInfo) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *BaseUserInfo) GetGender() uint32 {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return 0
}

func (x *BaseUserInfo) GetMarketId() uint32 {
	if x != nil && x.MarketId != nil {
		return *x.MarketId
	}
	return 0
}

func (x *BaseUserInfo) GetFaceId() uint32 {
	if x != nil && x.FaceId != nil {
		return *x.FaceId
	}
	return 0
}

func (x *BaseUserInfo) GetCustomFace() string {
	if x != nil && x.CustomFace != nil {
		return *x.CustomFace
	}
	return ""
}

func (x *BaseUserInfo) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *BaseUserInfo) GetUserType() BaseUserInfo_UserType {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return BaseUserInfo_UNKNOW
}

func (x *BaseUserInfo) GetSiteId() uint32 {
	if x != nil && x.SiteId != nil {
		return *x.SiteId
	}
	return 0
}

func (x *BaseUserInfo) GetRegisterData() string {
	if x != nil && x.RegisterData != nil {
		return *x.RegisterData
	}
	return ""
}

func (x *BaseUserInfo) GetCtrlFlag() uint32 {
	if x != nil && x.CtrlFlag != nil {
		return *x.CtrlFlag
	}
	return 0
}

func (x *BaseUserInfo) GetLoginWays() string {
	if x != nil && x.LoginWays != nil {
		return *x.LoginWays
	}
	return ""
}

func (x *BaseUserInfo) GetUserLevel() uint32 {
	if x != nil && x.UserLevel != nil {
		return *x.UserLevel
	}
	return 0
}

func (x *BaseUserInfo) GetRegMarketId() uint32 {
	if x != nil && x.RegMarketId != nil {
		return *x.RegMarketId
	}
	return 0
}

func (x *BaseUserInfo) GetRegSiteId() uint32 {
	if x != nil && x.RegSiteId != nil {
		return *x.RegSiteId
	}
	return 0
}

//玩家附加信息
type UserAdditionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Avatar   *uint32 `protobuf:"varint,1,opt,name=avatar" json:"avatar,omitempty"`     //头像框
	Titleid  *uint32 `protobuf:"varint,2,opt,name=titleid" json:"titleid,omitempty"`   //称号id
	Champion *uint32 `protobuf:"varint,3,opt,name=champion" json:"champion,omitempty"` //冠军次数
	Bestrank *uint32 `protobuf:"varint,4,opt,name=bestrank" json:"bestrank,omitempty"` //最佳排名
	Toplink  *uint32 `protobuf:"varint,5,opt,name=toplink" json:"toplink,omitempty"`   //最高连胜
}

func (x *UserAdditionInfo) Reset() {
	*x = UserAdditionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAdditionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAdditionInfo) ProtoMessage() {}

func (x *UserAdditionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAdditionInfo.ProtoReflect.Descriptor instead.
func (*UserAdditionInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *UserAdditionInfo) GetAvatar() uint32 {
	if x != nil && x.Avatar != nil {
		return *x.Avatar
	}
	return 0
}

func (x *UserAdditionInfo) GetTitleid() uint32 {
	if x != nil && x.Titleid != nil {
		return *x.Titleid
	}
	return 0
}

func (x *UserAdditionInfo) GetChampion() uint32 {
	if x != nil && x.Champion != nil {
		return *x.Champion
	}
	return 0
}

func (x *UserAdditionInfo) GetBestrank() uint32 {
	if x != nil && x.Bestrank != nil {
		return *x.Bestrank
	}
	return 0
}

func (x *UserAdditionInfo) GetToplink() uint32 {
	if x != nil && x.Toplink != nil {
		return *x.Toplink
	}
	return 0
}

type UserRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    *uint64       `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"` //用户ID
	BaseInfo  *BaseUserInfo `protobuf:"bytes,2,opt,name=base_info,json=baseInfo" json:"base_info,omitempty"`
	Score     *int64        `protobuf:"zigzag64,3,opt,name=score" json:"score,omitempty"`                              /// 可能为负的积分数
	Exp       *uint64       `protobuf:"varint,4,opt,name=exp" json:"exp,omitempty"`                                    /// 那个经验
	Health    *int64        `protobuf:"varint,5,opt,name=health" json:"health,omitempty"`                              // 玩家血量
	IsOffline *bool         `protobuf:"varint,6,opt,name=is_offline,json=isOffline,def=0" json:"is_offline,omitempty"` //是否掉线
	TableId   *uint64       `protobuf:"varint,7,opt,name=table_id,json=tableId" json:"table_id,omitempty"`             //所有桌
	SeatIndex *uint32       `protobuf:"varint,8,opt,name=seat_index,json=seatIndex" json:"seat_index,omitempty"`       //所在位置
	//是否正在参赛中，对于财富类型的自由赛有效
	IsPlaying     *bool   `protobuf:"varint,9,opt,name=is_playing,json=isPlaying" json:"is_playing,omitempty"`
	LostCount     *uint32 `protobuf:"varint,10,opt,name=lost_count,json=lostCount" json:"lost_count,omitempty"`             //玩家总输局
	DrawCount     *uint32 `protobuf:"varint,11,opt,name=draw_count,json=drawCount" json:"draw_count,omitempty"`             //玩家总平局
	WinCount      *uint32 `protobuf:"varint,12,opt,name=win_count,json=winCount" json:"win_count,omitempty"`                //玩家总胜局
	CurrentRank   *uint32 `protobuf:"varint,13,opt,name=current_rank,json=currentRank" json:"current_rank,omitempty"`       //当前排名
	WinningStreak *uint32 `protobuf:"varint,14,opt,name=winning_streak,json=winningStreak" json:"winning_streak,omitempty"` //当前连
	RoundCount    *uint32 `protobuf:"varint,15,opt,name=round_count,json=roundCount" json:"round_count,omitempty"`          //当前参与的局数
	//没被带入的财富,即被保留的 2017.9.17 cs 打算增加，来支持某些限制带入
	HealthSaving *uint64 `protobuf:"varint,16,opt,name=health_saving,json=healthSaving" json:"health_saving,omitempty"`
	//用户状态
	// 举手状态= (user_stat &0x01)  ----> =0 表示没有举手， =1 表示举手状态
	UserStat     *uint32 `protobuf:"varint,17,opt,name=user_stat,json=userStat" json:"user_stat,omitempty"`
	AdPercent    *int32  `protobuf:"varint,18,opt,name=ad_percent,json=adPercent" json:"ad_percent,omitempty"`          //看完广告buffer
	SharePercent *int32  `protobuf:"varint,19,opt,name=share_percent,json=sharePercent" json:"share_percent,omitempty"` //分享后buffer
	//当前参与的轮数
	TurnCount         *uint32           `protobuf:"varint,20,opt,name=turn_count,json=turnCount" json:"turn_count,omitempty"`
	ShuffleCardPlanId *int32            `protobuf:"varint,21,opt,name=shuffle_card_plan_id,json=shuffleCardPlanId" json:"shuffle_card_plan_id,omitempty"` //用户做牌方案ID 0牌库、其余与配置文件对应
	GoldCupCount      *int64            `protobuf:"varint,22,opt,name=gold_cup_count,json=goldCupCount" json:"gold_cup_count,omitempty"`                  //金杯数
	Addition          *UserAdditionInfo `protobuf:"bytes,23,opt,name=addition" json:"addition,omitempty"`                                                 //玩家附加信息(锦标赛+定时赛)
}

// Default values for UserRoomInfo fields.
const (
	Default_UserRoomInfo_IsOffline = bool(false)
)

func (x *UserRoomInfo) Reset() {
	*x = UserRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoomInfo) ProtoMessage() {}

func (x *UserRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoomInfo.ProtoReflect.Descriptor instead.
func (*UserRoomInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *UserRoomInfo) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *UserRoomInfo) GetBaseInfo() *BaseUserInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *UserRoomInfo) GetScore() int64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *UserRoomInfo) GetExp() uint64 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *UserRoomInfo) GetHealth() int64 {
	if x != nil && x.Health != nil {
		return *x.Health
	}
	return 0
}

func (x *UserRoomInfo) GetIsOffline() bool {
	if x != nil && x.IsOffline != nil {
		return *x.IsOffline
	}
	return Default_UserRoomInfo_IsOffline
}

func (x *UserRoomInfo) GetTableId() uint64 {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return 0
}

func (x *UserRoomInfo) GetSeatIndex() uint32 {
	if x != nil && x.SeatIndex != nil {
		return *x.SeatIndex
	}
	return 0
}

func (x *UserRoomInfo) GetIsPlaying() bool {
	if x != nil && x.IsPlaying != nil {
		return *x.IsPlaying
	}
	return false
}

func (x *UserRoomInfo) GetLostCount() uint32 {
	if x != nil && x.LostCount != nil {
		return *x.LostCount
	}
	return 0
}

func (x *UserRoomInfo) GetDrawCount() uint32 {
	if x != nil && x.DrawCount != nil {
		return *x.DrawCount
	}
	return 0
}

func (x *UserRoomInfo) GetWinCount() uint32 {
	if x != nil && x.WinCount != nil {
		return *x.WinCount
	}
	return 0
}

func (x *UserRoomInfo) GetCurrentRank() uint32 {
	if x != nil && x.CurrentRank != nil {
		return *x.CurrentRank
	}
	return 0
}

func (x *UserRoomInfo) GetWinningStreak() uint32 {
	if x != nil && x.WinningStreak != nil {
		return *x.WinningStreak
	}
	return 0
}

func (x *UserRoomInfo) GetRoundCount() uint32 {
	if x != nil && x.RoundCount != nil {
		return *x.RoundCount
	}
	return 0
}

func (x *UserRoomInfo) GetHealthSaving() uint64 {
	if x != nil && x.HealthSaving != nil {
		return *x.HealthSaving
	}
	return 0
}

func (x *UserRoomInfo) GetUserStat() uint32 {
	if x != nil && x.UserStat != nil {
		return *x.UserStat
	}
	return 0
}

func (x *UserRoomInfo) GetAdPercent() int32 {
	if x != nil && x.AdPercent != nil {
		return *x.AdPercent
	}
	return 0
}

func (x *UserRoomInfo) GetSharePercent() int32 {
	if x != nil && x.SharePercent != nil {
		return *x.SharePercent
	}
	return 0
}

func (x *UserRoomInfo) GetTurnCount() uint32 {
	if x != nil && x.TurnCount != nil {
		return *x.TurnCount
	}
	return 0
}

func (x *UserRoomInfo) GetShuffleCardPlanId() int32 {
	if x != nil && x.ShuffleCardPlanId != nil {
		return *x.ShuffleCardPlanId
	}
	return 0
}

func (x *UserRoomInfo) GetGoldCupCount() int64 {
	if x != nil && x.GoldCupCount != nil {
		return *x.GoldCupCount
	}
	return 0
}

func (x *UserRoomInfo) GetAddition() *UserAdditionInfo {
	if x != nil {
		return x.Addition
	}
	return nil
}

//*
//扩展用户信息
type ExtraUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    *uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Spreader  *uint64 `protobuf:"varint,2,opt,name=spreader" json:"spreader,omitempty"`
	Birthday  *uint32 `protobuf:"varint,3,opt,name=birthday" json:"birthday,omitempty"`
	IdCard    *string `protobuf:"bytes,4,opt,name=id_card,json=idCard" json:"id_card,omitempty"`
	RealName  *string `protobuf:"bytes,5,opt,name=real_name,json=realName" json:"real_name,omitempty"`
	Mobile    *string `protobuf:"bytes,9,opt,name=mobile" json:"mobile,omitempty"`                         //手机
	BindFlag  *uint32 `protobuf:"varint,13,opt,name=bind_flag,json=bindFlag" json:"bind_flag,omitempty"`   //绑定标识
	Account   *string `protobuf:"bytes,14,opt,name=account" json:"account,omitempty"`                      //登录账号
	LoginPass *string `protobuf:"bytes,15,opt,name=login_pass,json=loginPass" json:"login_pass,omitempty"` //登录密码
}

func (x *ExtraUserInfo) Reset() {
	*x = ExtraUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraUserInfo) ProtoMessage() {}

func (x *ExtraUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraUserInfo.ProtoReflect.Descriptor instead.
func (*ExtraUserInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *ExtraUserInfo) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *ExtraUserInfo) GetSpreader() uint64 {
	if x != nil && x.Spreader != nil {
		return *x.Spreader
	}
	return 0
}

func (x *ExtraUserInfo) GetBirthday() uint32 {
	if x != nil && x.Birthday != nil {
		return *x.Birthday
	}
	return 0
}

func (x *ExtraUserInfo) GetIdCard() string {
	if x != nil && x.IdCard != nil {
		return *x.IdCard
	}
	return ""
}

func (x *ExtraUserInfo) GetRealName() string {
	if x != nil && x.RealName != nil {
		return *x.RealName
	}
	return ""
}

func (x *ExtraUserInfo) GetMobile() string {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return ""
}

func (x *ExtraUserInfo) GetBindFlag() uint32 {
	if x != nil && x.BindFlag != nil {
		return *x.BindFlag
	}
	return 0
}

func (x *ExtraUserInfo) GetAccount() string {
	if x != nil && x.Account != nil {
		return *x.Account
	}
	return ""
}

func (x *ExtraUserInfo) GetLoginPass() string {
	if x != nil && x.LoginPass != nil {
		return *x.LoginPass
	}
	return ""
}

//* 游戏特别数据
//主要指成绩记录数据，
//如斗地主的最高倍数与达成时间
//如德州的最大牌型与达成时间
type GameRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataId    *uint32 `protobuf:"varint,1,opt,name=data_id,json=dataId" json:"data_id,omitempty"`
	DataTime  *uint64 `protobuf:"varint,2,opt,name=data_time,json=dataTime" json:"data_time,omitempty"`
	DataValue []byte  `protobuf:"bytes,3,opt,name=data_value,json=dataValue" json:"data_value,omitempty"`
}

func (x *GameRecordData) Reset() {
	*x = GameRecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRecordData) ProtoMessage() {}

func (x *GameRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRecordData.ProtoReflect.Descriptor instead.
func (*GameRecordData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *GameRecordData) GetDataId() uint32 {
	if x != nil && x.DataId != nil {
		return *x.DataId
	}
	return 0
}

func (x *GameRecordData) GetDataTime() uint64 {
	if x != nil && x.DataTime != nil {
		return *x.DataTime
	}
	return 0
}

func (x *GameRecordData) GetDataValue() []byte {
	if x != nil {
		return x.DataValue
	}
	return nil
}

//
//主要是用于某些游戏中，要为用户增加一些额外数据项
type GameAttData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataId    *uint32 `protobuf:"varint,1,opt,name=data_id,json=dataId" json:"data_id,omitempty"`
	DataValue []byte  `protobuf:"bytes,2,opt,name=data_value,json=dataValue" json:"data_value,omitempty"`
}

func (x *GameAttData) Reset() {
	*x = GameAttData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameAttData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameAttData) ProtoMessage() {}

func (x *GameAttData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameAttData.ProtoReflect.Descriptor instead.
func (*GameAttData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *GameAttData) GetDataId() uint32 {
	if x != nil && x.DataId != nil {
		return *x.DataId
	}
	return 0
}

func (x *GameAttData) GetDataValue() []byte {
	if x != nil {
		return x.DataValue
	}
	return nil
}

//
//用户当前连接信息
type UserSessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GateId          *uint32   `protobuf:"varint,1,opt,name=gate_id,json=gateId" json:"gate_id,omitempty"`                              //来自哪个gate
	GateConnId      *uint64   `protobuf:"varint,2,opt,name=gate_conn_id,json=gateConnId" json:"gate_conn_id,omitempty"`                //gate 相关连接
	ClientOs        *ClientOS `protobuf:"varint,3,opt,name=client_os,json=clientOs,enum=bs.types.ClientOS" json:"client_os,omitempty"` //客户端操作系统类型
	BuildNo         *uint32   `protobuf:"varint,4,opt,name=build_no,json=buildNo" json:"build_no,omitempty"`
	MarketId        *uint32   `protobuf:"varint,5,opt,name=market_id,json=marketId" json:"market_id,omitempty"`
	MachineCode     *string   `protobuf:"bytes,8,opt,name=machine_code,json=machineCode" json:"machine_code,omitempty"`
	Client_IP       *string   `protobuf:"bytes,9,opt,name=client_IP,json=clientIP" json:"client_IP,omitempty"` //客户端的IP
	ClientVersion   *string   `protobuf:"bytes,10,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	MachineName     *string   `protobuf:"bytes,11,opt,name=machine_name,json=machineName" json:"machine_name,omitempty"`
	ClientGuid      *string   `protobuf:"bytes,12,opt,name=client_guid,json=clientGuid" json:"client_guid,omitempty"`
	Sim             *string   `protobuf:"bytes,13,opt,name=sim" json:"sim,omitempty"`
	ThridType       *uint32   `protobuf:"varint,14,opt,name=thrid_type,json=thridType" json:"thrid_type,omitempty"`
	ThridParameter  *string   `protobuf:"bytes,15,opt,name=thrid_parameter,json=thridParameter" json:"thrid_parameter,omitempty"`
	OsName          *string   `protobuf:"bytes,16,opt,name=os_name,json=osName" json:"os_name,omitempty"`
	LoginipProvince *uint32   `protobuf:"varint,17,opt,name=loginip_province,json=loginipProvince" json:"loginip_province,omitempty"`  //登录省份id
	LoginipCity     *uint32   `protobuf:"varint,18,opt,name=loginip_city,json=loginipCity" json:"loginip_city,omitempty"`              //登录城市id
	OuterId         *string   `protobuf:"bytes,19,opt,name=outer_id,json=outerId" json:"outer_id,omitempty"`                           //对应的外部用户渠道id
	LogonMsg        []byte    `protobuf:"bytes,20,opt,name=logon_msg,json=logonMsg" json:"logon_msg,omitempty"`                        //登录报文
	UserCenterToken *string   `protobuf:"bytes,21,opt,name=user_center_token,json=userCenterToken" json:"user_center_token,omitempty"` //从用户中心获取的访问token add cs 2018.12.28
	LoginAppId      *uint64   `protobuf:"varint,22,opt,name=login_app_id,json=loginAppId" json:"login_app_id,omitempty"`               // 登陆的appid
	ClientCode      *string   `protobuf:"bytes,23,opt,name=client_code,json=clientCode" json:"client_code,omitempty"`                  //client_code
	PackageName     *string   `protobuf:"bytes,24,opt,name=package_name,json=packageName" json:"package_name,omitempty"`               //包名(手机版使用)
}

func (x *UserSessionInfo) Reset() {
	*x = UserSessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSessionInfo) ProtoMessage() {}

func (x *UserSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSessionInfo.ProtoReflect.Descriptor instead.
func (*UserSessionInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *UserSessionInfo) GetGateId() uint32 {
	if x != nil && x.GateId != nil {
		return *x.GateId
	}
	return 0
}

func (x *UserSessionInfo) GetGateConnId() uint64 {
	if x != nil && x.GateConnId != nil {
		return *x.GateConnId
	}
	return 0
}

func (x *UserSessionInfo) GetClientOs() ClientOS {
	if x != nil && x.ClientOs != nil {
		return *x.ClientOs
	}
	return ClientOS_UNKNOW
}

func (x *UserSessionInfo) GetBuildNo() uint32 {
	if x != nil && x.BuildNo != nil {
		return *x.BuildNo
	}
	return 0
}

func (x *UserSessionInfo) GetMarketId() uint32 {
	if x != nil && x.MarketId != nil {
		return *x.MarketId
	}
	return 0
}

func (x *UserSessionInfo) GetMachineCode() string {
	if x != nil && x.MachineCode != nil {
		return *x.MachineCode
	}
	return ""
}

func (x *UserSessionInfo) GetClient_IP() string {
	if x != nil && x.Client_IP != nil {
		return *x.Client_IP
	}
	return ""
}

func (x *UserSessionInfo) GetClientVersion() string {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return ""
}

func (x *UserSessionInfo) GetMachineName() string {
	if x != nil && x.MachineName != nil {
		return *x.MachineName
	}
	return ""
}

func (x *UserSessionInfo) GetClientGuid() string {
	if x != nil && x.ClientGuid != nil {
		return *x.ClientGuid
	}
	return ""
}

func (x *UserSessionInfo) GetSim() string {
	if x != nil && x.Sim != nil {
		return *x.Sim
	}
	return ""
}

func (x *UserSessionInfo) GetThridType() uint32 {
	if x != nil && x.ThridType != nil {
		return *x.ThridType
	}
	return 0
}

func (x *UserSessionInfo) GetThridParameter() string {
	if x != nil && x.ThridParameter != nil {
		return *x.ThridParameter
	}
	return ""
}

func (x *UserSessionInfo) GetOsName() string {
	if x != nil && x.OsName != nil {
		return *x.OsName
	}
	return ""
}

func (x *UserSessionInfo) GetLoginipProvince() uint32 {
	if x != nil && x.LoginipProvince != nil {
		return *x.LoginipProvince
	}
	return 0
}

func (x *UserSessionInfo) GetLoginipCity() uint32 {
	if x != nil && x.LoginipCity != nil {
		return *x.LoginipCity
	}
	return 0
}

func (x *UserSessionInfo) GetOuterId() string {
	if x != nil && x.OuterId != nil {
		return *x.OuterId
	}
	return ""
}

func (x *UserSessionInfo) GetLogonMsg() []byte {
	if x != nil {
		return x.LogonMsg
	}
	return nil
}

func (x *UserSessionInfo) GetUserCenterToken() string {
	if x != nil && x.UserCenterToken != nil {
		return *x.UserCenterToken
	}
	return ""
}

func (x *UserSessionInfo) GetLoginAppId() uint64 {
	if x != nil && x.LoginAppId != nil {
		return *x.LoginAppId
	}
	return 0
}

func (x *UserSessionInfo) GetClientCode() string {
	if x != nil && x.ClientCode != nil {
		return *x.ClientCode
	}
	return ""
}

func (x *UserSessionInfo) GetPackageName() string {
	if x != nil && x.PackageName != nil {
		return *x.PackageName
	}
	return ""
}

//* 财富类型项
type FundItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//财富ID，100以类进行保留
	//=1 表示基础的
	//=2 表示game 相关的
	//
	//MatchProve= 6,       //比赛券
	//InSureGold= 7,       //保险箱金币
	//RedPackage = 8,       //红包券
	//Diamond = 9,          //钻石(金豆)
	//Gold = 10,            //金币
	//Egg = 11,             //奖券
	//MaxFixedType=20,      //最大固定类型
	//
	//见
	//interface/types/matchsystem_define.h
	//
	Type          *EnumFundType `protobuf:"varint,1,opt,name=type,enum=bs.types.EnumFundType" json:"type,omitempty"`
	Id            *uint32       `protobuf:"varint,2,opt,name=id,def=0" json:"id,omitempty"`
	Count         *uint64       `protobuf:"varint,3,opt,name=count,def=0" json:"count,omitempty"`
	Name          *string       `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Validity      *uint32       `protobuf:"varint,5,opt,name=validity" json:"validity,omitempty"`                                 //有效时期
	FundType      *uint32       `protobuf:"varint,6,opt,name=fund_type,json=fundType" json:"fund_type,omitempty"`                 //换成整数
	MinVaue       *uint64       `protobuf:"varint,7,opt,name=min_vaue,json=minVaue" json:"min_vaue,omitempty"`                    //对于随机类，这是最小值
	MaxVaue       *uint64       `protobuf:"varint,8,opt,name=max_vaue,json=maxVaue" json:"max_vaue,omitempty"`                    //对于随机类，这是最大值
	ExpireTime    *string       `protobuf:"bytes,9,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`            //道具到期时间
	ExpiringCount *uint32       `protobuf:"varint,10,opt,name=expiring_count,json=expiringCount" json:"expiring_count,omitempty"` //道具即将到期数量（即下个月就要失效的奖券数量）
}

// Default values for FundItem fields.
const (
	Default_FundItem_Id    = uint32(0)
	Default_FundItem_Count = uint64(0)
)

func (x *FundItem) Reset() {
	*x = FundItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundItem) ProtoMessage() {}

func (x *FundItem) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundItem.ProtoReflect.Descriptor instead.
func (*FundItem) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *FundItem) GetType() EnumFundType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return EnumFundType_ALL_TYPE
}

func (x *FundItem) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return Default_FundItem_Id
}

func (x *FundItem) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return Default_FundItem_Count
}

func (x *FundItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FundItem) GetValidity() uint32 {
	if x != nil && x.Validity != nil {
		return *x.Validity
	}
	return 0
}

func (x *FundItem) GetFundType() uint32 {
	if x != nil && x.FundType != nil {
		return *x.FundType
	}
	return 0
}

func (x *FundItem) GetMinVaue() uint64 {
	if x != nil && x.MinVaue != nil {
		return *x.MinVaue
	}
	return 0
}

func (x *FundItem) GetMaxVaue() uint64 {
	if x != nil && x.MaxVaue != nil {
		return *x.MaxVaue
	}
	return 0
}

func (x *FundItem) GetExpireTime() string {
	if x != nil && x.ExpireTime != nil {
		return *x.ExpireTime
	}
	return ""
}

func (x *FundItem) GetExpiringCount() uint32 {
	if x != nil && x.ExpiringCount != nil {
		return *x.ExpiringCount
	}
	return 0
}

//
//用户当天局数信息,之前为牌库传参，后由大数据自己提供，结构暂时保留
type UserDailyDrawInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         *uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`                           //用户ID
	PlanId         *int32  `protobuf:"varint,2,opt,name=plan_id,json=planId" json:"plan_id,omitempty"`                           //房间planid
	DailyLostCount *uint32 `protobuf:"varint,3,opt,name=daily_lost_count,json=dailyLostCount" json:"daily_lost_count,omitempty"` //当日输局
	DailyDrawCount *uint32 `protobuf:"varint,4,opt,name=daily_draw_count,json=dailyDrawCount" json:"daily_draw_count,omitempty"` //当日平局
	DailyWinCount  *uint32 `protobuf:"varint,5,opt,name=daily_win_count,json=dailyWinCount" json:"daily_win_count,omitempty"`    //当日赢局
}

func (x *UserDailyDrawInfo) Reset() {
	*x = UserDailyDrawInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDailyDrawInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDailyDrawInfo) ProtoMessage() {}

func (x *UserDailyDrawInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDailyDrawInfo.ProtoReflect.Descriptor instead.
func (*UserDailyDrawInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *UserDailyDrawInfo) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *UserDailyDrawInfo) GetPlanId() int32 {
	if x != nil && x.PlanId != nil {
		return *x.PlanId
	}
	return 0
}

func (x *UserDailyDrawInfo) GetDailyLostCount() uint32 {
	if x != nil && x.DailyLostCount != nil {
		return *x.DailyLostCount
	}
	return 0
}

func (x *UserDailyDrawInfo) GetDailyDrawCount() uint32 {
	if x != nil && x.DailyDrawCount != nil {
		return *x.DailyDrawCount
	}
	return 0
}

func (x *UserDailyDrawInfo) GetDailyWinCount() uint32 {
	if x != nil && x.DailyWinCount != nil {
		return *x.DailyWinCount
	}
	return 0
}

//*
//游戏中用户信息
type GameUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             *uint64          `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Outerid            *int32           `protobuf:"varint,3,opt,name=outerid" json:"outerid,omitempty"`                                                   //93-代表微信用户
	ProtectNumber      *uint32          `protobuf:"varint,6,opt,name=protect_number,json=protectNumber" json:"protect_number,omitempty"`                  //今日保护局数，个数与players一致
	TotalProtectNumber *uint32          `protobuf:"varint,7,opt,name=total_protect_number,json=totalProtectNumber" json:"total_protect_number,omitempty"` //累计保护次数
	State              *int32           `protobuf:"varint,8,opt,name=state" json:"state,omitempty"`                                                       //保护状态.保护次数用完,会关闭的.1-正常保护,0-保护关闭
	TotalRoundNumber   *uint32          `protobuf:"varint,9,opt,name=total_round_number,json=totalRoundNumber" json:"total_round_number,omitempty"`       //累计次数
	BaseInfo           *UserRoomInfo    `protobuf:"bytes,10,opt,name=base_info,json=baseInfo" json:"base_info,omitempty"`                                 //用户基本信息
	SessionInfo        *UserSessionInfo `protobuf:"bytes,11,opt,name=session_info,json=sessionInfo" json:"session_info,omitempty"`                        //用户session信息
	Param              *int32           `protobuf:"varint,12,opt,name=param" json:"param,omitempty"`                                                      //附加信息：换牌状态
	Param2             *int32           `protobuf:"varint,14,opt,name=param2" json:"param2,omitempty"`                                                    //附加信息2：明牌开始=1，普通开始=0
	Param3             *string          `protobuf:"bytes,15,opt,name=param3" json:"param3,omitempty"`                                                     //附加信息3
	Param4             *string          `protobuf:"bytes,16,opt,name=param4" json:"param4,omitempty"`                                                     //附加信息4
}

func (x *GameUserInfo) Reset() {
	*x = GameUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUserInfo) ProtoMessage() {}

func (x *GameUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUserInfo.ProtoReflect.Descriptor instead.
func (*GameUserInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *GameUserInfo) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *GameUserInfo) GetOuterid() int32 {
	if x != nil && x.Outerid != nil {
		return *x.Outerid
	}
	return 0
}

func (x *GameUserInfo) GetProtectNumber() uint32 {
	if x != nil && x.ProtectNumber != nil {
		return *x.ProtectNumber
	}
	return 0
}

func (x *GameUserInfo) GetTotalProtectNumber() uint32 {
	if x != nil && x.TotalProtectNumber != nil {
		return *x.TotalProtectNumber
	}
	return 0
}

func (x *GameUserInfo) GetState() int32 {
	if x != nil && x.State != nil {
		return *x.State
	}
	return 0
}

func (x *GameUserInfo) GetTotalRoundNumber() uint32 {
	if x != nil && x.TotalRoundNumber != nil {
		return *x.TotalRoundNumber
	}
	return 0
}

func (x *GameUserInfo) GetBaseInfo() *UserRoomInfo {
	if x != nil {
		return x.BaseInfo
	}
	return nil
}

func (x *GameUserInfo) GetSessionInfo() *UserSessionInfo {
	if x != nil {
		return x.SessionInfo
	}
	return nil
}

func (x *GameUserInfo) GetParam() int32 {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return 0
}

func (x *GameUserInfo) GetParam2() int32 {
	if x != nil && x.Param2 != nil {
		return *x.Param2
	}
	return 0
}

func (x *GameUserInfo) GetParam3() string {
	if x != nil && x.Param3 != nil {
		return *x.Param3
	}
	return ""
}

func (x *GameUserInfo) GetParam4() string {
	if x != nil && x.Param4 != nil {
		return *x.Param4
	}
	return ""
}

//
//下面定义的增加最大值与减少最大值与BUSINEES_FUND中的最大值，是二个控制关系
//一般来说，这个大值大于等于BUSINEES_FUND中的二个值
//
type FundServerItemdef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundId        *uint32 `protobuf:"varint,1,opt,name=fund_id,json=fundId" json:"fund_id,omitempty"`                      //财富ID
	FundType      *uint32 `protobuf:"varint,2,opt,name=fund_type,json=fundType" json:"fund_type,omitempty"`                //类型
	FundName      *string `protobuf:"bytes,3,opt,name=fund_name,json=fundName" json:"fund_name,omitempty"`                 //财富名称
	ValidityFlag  *int32  `protobuf:"varint,4,opt,name=validity_flag,json=validityFlag" json:"validity_flag,omitempty"`    //有效期 0:不过期
	ShowFlag      *int32  `protobuf:"varint,5,opt,name=show_flag,json=showFlag" json:"show_flag,omitempty"`                //背包 0:不显示 1：显示
	BoxFlag       *int32  `protobuf:"varint,6,opt,name=box_flag,json=boxFlag" json:"box_flag,omitempty"`                   //0:不是宝箱 1:晋通宝箱 2:概率宝箱
	MaxInc        *int64  `protobuf:"varint,7,opt,name=max_inc,json=maxInc" json:"max_inc,omitempty"`                      //允许增加的最大值
	MaxDec        *int64  `protobuf:"varint,8,opt,name=max_dec,json=maxDec" json:"max_dec,omitempty"`                      //允许减少的最大值
	FundAttribute *int64  `protobuf:"varint,9,opt,name=fund_attribute,json=fundAttribute" json:"fund_attribute,omitempty"` //财富属性值
	NegativeFlag  *int32  `protobuf:"varint,10,opt,name=negative_flag,json=negativeFlag" json:"negative_flag,omitempty"`   //是否可以为负
	ShowIcon      *string `protobuf:"bytes,11,opt,name=show_icon,json=showIcon" json:"show_icon,omitempty"`                // 关联的图片地址
	EffTime       *int32  `protobuf:"varint,12,opt,name=eff_time,json=effTime" json:"eff_time,omitempty"`                  //有效期
}

func (x *FundServerItemdef) Reset() {
	*x = FundServerItemdef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundServerItemdef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundServerItemdef) ProtoMessage() {}

func (x *FundServerItemdef) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundServerItemdef.ProtoReflect.Descriptor instead.
func (*FundServerItemdef) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *FundServerItemdef) GetFundId() uint32 {
	if x != nil && x.FundId != nil {
		return *x.FundId
	}
	return 0
}

func (x *FundServerItemdef) GetFundType() uint32 {
	if x != nil && x.FundType != nil {
		return *x.FundType
	}
	return 0
}

func (x *FundServerItemdef) GetFundName() string {
	if x != nil && x.FundName != nil {
		return *x.FundName
	}
	return ""
}

func (x *FundServerItemdef) GetValidityFlag() int32 {
	if x != nil && x.ValidityFlag != nil {
		return *x.ValidityFlag
	}
	return 0
}

func (x *FundServerItemdef) GetShowFlag() int32 {
	if x != nil && x.ShowFlag != nil {
		return *x.ShowFlag
	}
	return 0
}

func (x *FundServerItemdef) GetBoxFlag() int32 {
	if x != nil && x.BoxFlag != nil {
		return *x.BoxFlag
	}
	return 0
}

func (x *FundServerItemdef) GetMaxInc() int64 {
	if x != nil && x.MaxInc != nil {
		return *x.MaxInc
	}
	return 0
}

func (x *FundServerItemdef) GetMaxDec() int64 {
	if x != nil && x.MaxDec != nil {
		return *x.MaxDec
	}
	return 0
}

func (x *FundServerItemdef) GetFundAttribute() int64 {
	if x != nil && x.FundAttribute != nil {
		return *x.FundAttribute
	}
	return 0
}

func (x *FundServerItemdef) GetNegativeFlag() int32 {
	if x != nil && x.NegativeFlag != nil {
		return *x.NegativeFlag
	}
	return 0
}

func (x *FundServerItemdef) GetShowIcon() string {
	if x != nil && x.ShowIcon != nil {
		return *x.ShowIcon
	}
	return ""
}

func (x *FundServerItemdef) GetEffTime() int32 {
	if x != nil && x.EffTime != nil {
		return *x.EffTime
	}
	return 0
}

//给服务器的 用户财富数据 主要是除了银票以外的
//银票将定义二种类型 的FUND_ID,一种是昨天的，一种是今天的
type FundDataItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundId    *uint32 `protobuf:"varint,1,opt,name=fund_id,json=fundId" json:"fund_id,omitempty"`          //对应该财富的属性数据
	FundCount *int64  `protobuf:"varint,2,opt,name=fund_count,json=fundCount" json:"fund_count,omitempty"` //财富数量
	OverTime  *string `protobuf:"bytes,3,opt,name=over_time,json=overTime" json:"over_time,omitempty"`     //过期时间
}

func (x *FundDataItem) Reset() {
	*x = FundDataItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundDataItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundDataItem) ProtoMessage() {}

func (x *FundDataItem) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FundDataItem.ProtoReflect.Descriptor instead.
func (*FundDataItem) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{12}
}

func (x *FundDataItem) GetFundId() uint32 {
	if x != nil && x.FundId != nil {
		return *x.FundId
	}
	return 0
}

func (x *FundDataItem) GetFundCount() int64 {
	if x != nil && x.FundCount != nil {
		return *x.FundCount
	}
	return 0
}

func (x *FundDataItem) GetOverTime() string {
	if x != nil && x.OverTime != nil {
		return *x.OverTime
	}
	return ""
}

//buff
type Buff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferId  *int32  `protobuf:"varint,1,opt,name=buffer_id,json=bufferId" json:"buffer_id,omitempty"`    //Buff ID
	ItemId    *int32  `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`          //绑定的物品ID
	BeginTime *uint64 `protobuf:"varint,3,opt,name=begin_time,json=beginTime" json:"begin_time,omitempty"` //起始时间
	EndTime   *uint64 `protobuf:"varint,4,opt,name=end_time,json=endTime" json:"end_time,omitempty"`       //结束时间
}

func (x *Buff) Reset() {
	*x = Buff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buff) ProtoMessage() {}

func (x *Buff) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buff.ProtoReflect.Descriptor instead.
func (*Buff) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{13}
}

func (x *Buff) GetBufferId() int32 {
	if x != nil && x.BufferId != nil {
		return *x.BufferId
	}
	return 0
}

func (x *Buff) GetItemId() int32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *Buff) GetBeginTime() uint64 {
	if x != nil && x.BeginTime != nil {
		return *x.BeginTime
	}
	return 0
}

func (x *Buff) GetEndTime() uint64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

//自定义信息扩展
type UserBaseInfoEx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            *uint64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`                                     //用户id
	NickName          *string `protobuf:"bytes,2,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`                                //昵称
	ExpCur            *uint64 `protobuf:"varint,3,opt,name=exp_cur,json=expCur" json:"exp_cur,omitempty"`                                     //当前等级经验
	ExpTotal          *uint64 `protobuf:"varint,4,opt,name=exp_total,json=expTotal" json:"exp_total,omitempty"`                               //获得总经验
	Level             *uint64 `protobuf:"varint,5,opt,name=level" json:"level,omitempty"`                                                     //当前等级
	RoleId            *int32  `protobuf:"varint,6,opt,name=role_id,json=roleId" json:"role_id,omitempty"`                                     //角色ID
	SkinId            *int32  `protobuf:"varint,7,opt,name=skin_id,json=skinId" json:"skin_id,omitempty"`                                     //皮肤ID
	PkLevel           *int32  `protobuf:"varint,8,opt,name=pk_level,json=pkLevel" json:"pk_level,omitempty"`                                  //段位
	PkStar            *int32  `protobuf:"varint,9,opt,name=pk_star,json=pkStar" json:"pk_star,omitempty"`                                     //段位星星
	PkTitle           *int32  `protobuf:"varint,10,opt,name=pk_title,json=pkTitle" json:"pk_title,omitempty"`                                 //段位头衔
	Buff              []*Buff `protobuf:"bytes,11,rep,name=buff" json:"buff,omitempty"`                                                       //道具Buff
	GameId            *uint64 `protobuf:"varint,12,opt,name=game_id,json=gameId" json:"game_id,omitempty"`                                    //玩家ID的另一种形式
	LastLogin         *uint64 `protobuf:"varint,13,opt,name=last_login,json=lastLogin" json:"last_login,omitempty"`                           //最近登录时间
	LastLogout        *uint64 `protobuf:"varint,14,opt,name=last_logout,json=lastLogout" json:"last_logout,omitempty"`                        //最近登出时间
	Tag               []int32 `protobuf:"varint,15,rep,name=tag" json:"tag,omitempty"`                                                        //标签
	GameTotalCount    *uint64 `protobuf:"varint,16,opt,name=game_total_count,json=gameTotalCount" json:"game_total_count,omitempty"`          //游戏总局数
	RecentCount       *uint32 `protobuf:"varint,17,opt,name=recent_count,json=recentCount" json:"recent_count,omitempty"`                     //最近一天对局次数
	RecentDay         *uint64 `protobuf:"varint,18,opt,name=recent_day,json=recentDay" json:"recent_day,omitempty"`                           //最近一天对局日期
	ProtectTotalCount *uint64 `protobuf:"varint,19,opt,name=protect_total_count,json=protectTotalCount" json:"protect_total_count,omitempty"` //保护总次数
	ProtectCount      *uint32 `protobuf:"varint,20,opt,name=protect_count,json=protectCount" json:"protect_count,omitempty"`                  //当日保护总次数
	ProtectDay        *uint64 `protobuf:"varint,21,opt,name=protect_day,json=protectDay" json:"protect_day,omitempty"`                        //更新保护次数时的日期
	//统计
	GameWinCount    *uint64 `protobuf:"varint,22,opt,name=game_win_count,json=gameWinCount" json:"game_win_count,omitempty"`          //游戏获胜局数
	GameLoseCount   *uint64 `protobuf:"varint,23,opt,name=game_lose_count,json=gameLoseCount" json:"game_lose_count,omitempty"`       //游戏失败局数
	GameDrawCount   *uint64 `protobuf:"varint,24,opt,name=game_draw_count,json=gameDrawCount" json:"game_draw_count,omitempty"`       //游戏平局局数
	GameEscapeCount *uint64 `protobuf:"varint,25,opt,name=game_escape_count,json=gameEscapeCount" json:"game_escape_count,omitempty"` //游戏逃跑局数
	ActivationTime  *uint64 `protobuf:"varint,26,opt,name=activation_time,json=activationTime" json:"activation_time,omitempty"`      //激活时间
	RegisterData    *string `protobuf:"bytes,27,opt,name=register_data,json=registerData" json:"register_data,omitempty"`             //注册时间
	MarketId        *uint32 `protobuf:"varint,28,opt,name=market_id,json=marketId" json:"market_id,omitempty"`                        //所属渠道
	SiteId          *uint32 `protobuf:"varint,29,opt,name=site_id,json=siteId" json:"site_id,omitempty"`                              //site id
}

func (x *UserBaseInfoEx) Reset() {
	*x = UserBaseInfoEx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBaseInfoEx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBaseInfoEx) ProtoMessage() {}

func (x *UserBaseInfoEx) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBaseInfoEx.ProtoReflect.Descriptor instead.
func (*UserBaseInfoEx) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{14}
}

func (x *UserBaseInfoEx) GetUserId() uint64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *UserBaseInfoEx) GetNickName() string {
	if x != nil && x.NickName != nil {
		return *x.NickName
	}
	return ""
}

func (x *UserBaseInfoEx) GetExpCur() uint64 {
	if x != nil && x.ExpCur != nil {
		return *x.ExpCur
	}
	return 0
}

func (x *UserBaseInfoEx) GetExpTotal() uint64 {
	if x != nil && x.ExpTotal != nil {
		return *x.ExpTotal
	}
	return 0
}

func (x *UserBaseInfoEx) GetLevel() uint64 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *UserBaseInfoEx) GetRoleId() int32 {
	if x != nil && x.RoleId != nil {
		return *x.RoleId
	}
	return 0
}

func (x *UserBaseInfoEx) GetSkinId() int32 {
	if x != nil && x.SkinId != nil {
		return *x.SkinId
	}
	return 0
}

func (x *UserBaseInfoEx) GetPkLevel() int32 {
	if x != nil && x.PkLevel != nil {
		return *x.PkLevel
	}
	return 0
}

func (x *UserBaseInfoEx) GetPkStar() int32 {
	if x != nil && x.PkStar != nil {
		return *x.PkStar
	}
	return 0
}

func (x *UserBaseInfoEx) GetPkTitle() int32 {
	if x != nil && x.PkTitle != nil {
		return *x.PkTitle
	}
	return 0
}

func (x *UserBaseInfoEx) GetBuff() []*Buff {
	if x != nil {
		return x.Buff
	}
	return nil
}

func (x *UserBaseInfoEx) GetGameId() uint64 {
	if x != nil && x.GameId != nil {
		return *x.GameId
	}
	return 0
}

func (x *UserBaseInfoEx) GetLastLogin() uint64 {
	if x != nil && x.LastLogin != nil {
		return *x.LastLogin
	}
	return 0
}

func (x *UserBaseInfoEx) GetLastLogout() uint64 {
	if x != nil && x.LastLogout != nil {
		return *x.LastLogout
	}
	return 0
}

func (x *UserBaseInfoEx) GetTag() []int32 {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *UserBaseInfoEx) GetGameTotalCount() uint64 {
	if x != nil && x.GameTotalCount != nil {
		return *x.GameTotalCount
	}
	return 0
}

func (x *UserBaseInfoEx) GetRecentCount() uint32 {
	if x != nil && x.RecentCount != nil {
		return *x.RecentCount
	}
	return 0
}

func (x *UserBaseInfoEx) GetRecentDay() uint64 {
	if x != nil && x.RecentDay != nil {
		return *x.RecentDay
	}
	return 0
}

func (x *UserBaseInfoEx) GetProtectTotalCount() uint64 {
	if x != nil && x.ProtectTotalCount != nil {
		return *x.ProtectTotalCount
	}
	return 0
}

func (x *UserBaseInfoEx) GetProtectCount() uint32 {
	if x != nil && x.ProtectCount != nil {
		return *x.ProtectCount
	}
	return 0
}

func (x *UserBaseInfoEx) GetProtectDay() uint64 {
	if x != nil && x.ProtectDay != nil {
		return *x.ProtectDay
	}
	return 0
}

func (x *UserBaseInfoEx) GetGameWinCount() uint64 {
	if x != nil && x.GameWinCount != nil {
		return *x.GameWinCount
	}
	return 0
}

func (x *UserBaseInfoEx) GetGameLoseCount() uint64 {
	if x != nil && x.GameLoseCount != nil {
		return *x.GameLoseCount
	}
	return 0
}

func (x *UserBaseInfoEx) GetGameDrawCount() uint64 {
	if x != nil && x.GameDrawCount != nil {
		return *x.GameDrawCount
	}
	return 0
}

func (x *UserBaseInfoEx) GetGameEscapeCount() uint64 {
	if x != nil && x.GameEscapeCount != nil {
		return *x.GameEscapeCount
	}
	return 0
}

func (x *UserBaseInfoEx) GetActivationTime() uint64 {
	if x != nil && x.ActivationTime != nil {
		return *x.ActivationTime
	}
	return 0
}

func (x *UserBaseInfoEx) GetRegisterData() string {
	if x != nil && x.RegisterData != nil {
		return *x.RegisterData
	}
	return ""
}

func (x *UserBaseInfoEx) GetMarketId() uint32 {
	if x != nil && x.MarketId != nil {
		return *x.MarketId
	}
	return 0
}

func (x *UserBaseInfoEx) GetSiteId() uint32 {
	if x != nil && x.SiteId != nil {
		return *x.SiteId
	}
	return 0
}

//广告观看次数
type ADWatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdId            *uint64 `protobuf:"varint,1,opt,name=ad_id,json=adId" json:"ad_id,omitempty"`                                    //广告id 1免输、2翻倍 可扩展...
	DayTimes        *uint64 `protobuf:"varint,2,opt,name=day_times,json=dayTimes" json:"day_times,omitempty"`                        //今日观看次数
	TotalTimes      *uint64 `protobuf:"varint,3,opt,name=total_times,json=totalTimes" json:"total_times,omitempty"`                  //历史观看次数
	SourAppId       *uint32 `protobuf:"varint,4,opt,name=sour_app_id,json=sourAppId" json:"sour_app_id,omitempty"`                   //发起APPID,目前只有房间
	LimitWatchTimes *uint64 `protobuf:"varint,5,opt,name=limit_watch_times,json=limitWatchTimes" json:"limit_watch_times,omitempty"` //今日观看次数
}

func (x *ADWatchInfo) Reset() {
	*x = ADWatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADWatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADWatchInfo) ProtoMessage() {}

func (x *ADWatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADWatchInfo.ProtoReflect.Descriptor instead.
func (*ADWatchInfo) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{15}
}

func (x *ADWatchInfo) GetAdId() uint64 {
	if x != nil && x.AdId != nil {
		return *x.AdId
	}
	return 0
}

func (x *ADWatchInfo) GetDayTimes() uint64 {
	if x != nil && x.DayTimes != nil {
		return *x.DayTimes
	}
	return 0
}

func (x *ADWatchInfo) GetTotalTimes() uint64 {
	if x != nil && x.TotalTimes != nil {
		return *x.TotalTimes
	}
	return 0
}

func (x *ADWatchInfo) GetSourAppId() uint32 {
	if x != nil && x.SourAppId != nil {
		return *x.SourAppId
	}
	return 0
}

func (x *ADWatchInfo) GetLimitWatchTimes() uint64 {
	if x != nil && x.LimitWatchTimes != nil {
		return *x.LimitWatchTimes
	}
	return 0
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x62,
	0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x57, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x6e,
	0x67, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6c, 0x6f, 0x6e, 0x67, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xc6, 0x04, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x61,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x74, 0x72, 0x6c, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x74, 0x72, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x77, 0x61, 0x79, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x57, 0x61, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x65,
	0x67, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x65, 0x67, 0x53, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x08, 0x43, 0x74,
	0x72, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x57,
	0x58, 0x5f, 0x49, 0x4d, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x53, 0x4b, 0x5f,
	0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x22, 0x2d, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x10, 0x0a, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x65, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x62, 0x65, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x22, 0x95, 0x06, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x69, 0x73,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x73, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73,
	0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x6f, 0x6c, 0x64, 0x43, 0x75, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x02, 0x0a, 0x0d, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x69, 0x6e, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x62, 0x69, 0x6e, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x73,
	0x73, 0x22, 0x65, 0x0a, 0x0e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x45, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65,
	0x41, 0x74, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xeb, 0x05, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x67, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4f, 0x53, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x50, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x75,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x69, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x69, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x68,
	0x72, 0x69, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x69, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x69, 0x70, 0x43,
	0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xad, 0x02,
	0x0a, 0x08, 0x46, 0x75, 0x6e, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x5f, 0x76, 0x61, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61,
	0x78, 0x56, 0x61, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc1, 0x01,
	0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x44, 0x72, 0x61, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c,
	0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xaf, 0x03, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x62,
	0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x34, 0x22, 0xf9, 0x02, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x64, 0x65, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x19,
	0x0a, 0x08, 0x62, 0x6f, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x62, 0x6f, 0x78, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x49,
	0x6e, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x75, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66,
	0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77,
	0x49, 0x63, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x63, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x75,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x04, 0x42, 0x75, 0x66, 0x66, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xaa, 0x07, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x78, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x69, 0x63, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x5f, 0x63, 0x75, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x78, 0x70, 0x43, 0x75, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x65, 0x78, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x70, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6b, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6b, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x75, 0x66, 0x66, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x62, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x75, 0x66, 0x66,
	0x52, 0x04, 0x62, 0x75, 0x66, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x67, 0x61, 0x6d,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x44, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x67, 0x61, 0x6d,
	0x65, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65,
	0x44, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x41, 0x44,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x64, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x2a, 0x3c, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x53, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x50, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x10, 0x04, 0x12, 0x06,
	0x0a, 0x02, 0x48, 0x35, 0x10, 0x08, 0x2a, 0xc7, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x75, 0x6d, 0x46,
	0x75, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x4e,
	0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x48, 0x49,
	0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4d,
	0x45, 0x45, 0x58, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12,
	0x0e, 0x0a, 0x0a, 0x47, 0x4f, 0x4f, 0x44, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x12,
	0x10, 0x0a, 0x0c, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x49, 0x46, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x09, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a,
	0x2a, 0x78, 0x0a, 0x12, 0x45, 0x6e, 0x75, 0x6d, 0x46, 0x75, 0x6e, 0x64, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x49, 0x5f, 0x41, 0x4c, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x54, 0x54, 0x4c,
	0x45, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x47, 0x41, 0x4d, 0x45, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x41, 0x4d, 0x45, 0x50,
	0x52, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x2a, 0x59, 0x0a, 0x09, 0x45, 0x49,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x5f, 0x43, 0x48,
	0x49, 0x50, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x10, 0x03, 0x42, 0x16, 0x5a, 0x14, 0x78, 0x6c, 0x64, 0x64, 0x7a, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_types_proto_goTypes = []interface{}{
	(ClientOS)(0),              // 0: bs.types.ClientOS
	(EnumFundType)(0),          // 1: bs.types.EnumFundType
	(EnumFundManageType)(0),    // 2: bs.types.EnumFundManageType
	(EItemType)(0),             // 3: bs.types.EItemType
	(BaseUserInfo_CtrlFlag)(0), // 4: bs.types.BaseUserInfo.CtrlFlag
	(BaseUserInfo_UserType)(0), // 5: bs.types.BaseUserInfo.UserType
	(*CommonMessage)(nil),      // 6: bs.types.CommonMessage
	(*BaseUserInfo)(nil),       // 7: bs.types.BaseUserInfo
	(*UserAdditionInfo)(nil),   // 8: bs.types.UserAdditionInfo
	(*UserRoomInfo)(nil),       // 9: bs.types.UserRoomInfo
	(*ExtraUserInfo)(nil),      // 10: bs.types.ExtraUserInfo
	(*GameRecordData)(nil),     // 11: bs.types.GameRecordData
	(*GameAttData)(nil),        // 12: bs.types.GameAttData
	(*UserSessionInfo)(nil),    // 13: bs.types.UserSessionInfo
	(*FundItem)(nil),           // 14: bs.types.FundItem
	(*UserDailyDrawInfo)(nil),  // 15: bs.types.UserDailyDrawInfo
	(*GameUserInfo)(nil),       // 16: bs.types.GameUserInfo
	(*FundServerItemdef)(nil),  // 17: bs.types.FundServerItemdef
	(*FundDataItem)(nil),       // 18: bs.types.FundDataItem
	(*Buff)(nil),               // 19: bs.types.Buff
	(*UserBaseInfoEx)(nil),     // 20: bs.types.UserBaseInfoEx
	(*ADWatchInfo)(nil),        // 21: bs.types.ADWatchInfo
}
var file_types_proto_depIdxs = []int32{
	5,  // 0: bs.types.BaseUserInfo.user_type:type_name -> bs.types.BaseUserInfo.UserType
	7,  // 1: bs.types.UserRoomInfo.base_info:type_name -> bs.types.BaseUserInfo
	8,  // 2: bs.types.UserRoomInfo.addition:type_name -> bs.types.UserAdditionInfo
	0,  // 3: bs.types.UserSessionInfo.client_os:type_name -> bs.types.ClientOS
	1,  // 4: bs.types.FundItem.type:type_name -> bs.types.EnumFundType
	9,  // 5: bs.types.GameUserInfo.base_info:type_name -> bs.types.UserRoomInfo
	13, // 6: bs.types.GameUserInfo.session_info:type_name -> bs.types.UserSessionInfo
	19, // 7: bs.types.UserBaseInfoEx.buff:type_name -> bs.types.Buff
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAdditionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameRecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameAttData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDailyDrawInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundServerItemdef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundDataItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBaseInfoEx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADWatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
